{
	"info": {
		"_postman_id": "3587677a-df42-4c54-8bb0-f66867cec5e5",
		"name": "Users Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Post User Demeter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User created successfully with a 201 code\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that it returns an object\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm response message\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.user.username).to.eql(\"demeter\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"demeter\",\r\n    \"password\": \"demeter123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/signup",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Post User Hades",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User created successfully with a 201 code\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm response message\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.user.username).to.eql(\"hades\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"hades\",\r\n    \"firstName\": \"Asha\",\r\n    \"password\": \"hades123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/signup",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User created successfully with a 200 code\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that it returns an array\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.users).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm that there are at least two users\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.numberOfUsers).is.at.least(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/users",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User Demeter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User created successfully with a 200 code\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that user has password\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.password).is.not.eq(null);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/demeter",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"demeter"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User Ares (fails)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User not found with a 404 code\", () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that it returns a string\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.msg).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm that user was not found\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.msg).to.be.eq(\"User Not Found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/hefesto",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"hefesto"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change Demeter phone number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User updated successfully with a 200 code\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check updated phone number\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.phone).is.eq(\"444 555 666\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phone\": \"444 555 666\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/demeter",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"demeter"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change Demeter username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User updated successfully with a 200 code\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check updated phone number\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).is.eq(\"ianthe\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"ianthe\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/demeter",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"demeter"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User Demeter (fails because now is Ianthe)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User not found with a 404 code\", () => {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that user has password\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.msg).is.eq(\"User Not Found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/demeter",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"demeter"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user Ianthe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User created successfully with a 200 code\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that username has changed\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).is.eq(\"ianthe\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/ianthe",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"ianthe"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user Ianthe friends",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User created successfully with a 200 code\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that it returns an array\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/ianthe/friends",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"ianthe",
						"friends"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user Ianthe statistics",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User created successfully with a 200 code\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that it returns an array\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/ianthe/statistics",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"ianthe",
						"statistics"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User Ianthe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User deleted successfully with a 200 code\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that it returns an object\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm response message\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.msg).to.eql(\"ianthe was deleted\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/api/users/ianthe",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"ianthe"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User Hades",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User deleted successfully with a 200 code\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that it returns an object\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm response message\", () => {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.msg).to.eql(\"hades was deleted\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/api/users/hades",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"hades"
					]
				}
			},
			"response": []
		}
	]
}